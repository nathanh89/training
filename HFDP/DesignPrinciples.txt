This is just a quick reference for the design principles and patterns expounded upon in Head First Design Patterns.

*Ch1* - [Intro to Design Patterns]

-Identify the aspects of your application that vary and seperate them from what stays the same. (Encapsulate what varies)

-Program to an interface, not an implementation

-Favor composition over inheritance

-THE STRATEGY PATTERN: defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

*Ch2* - [Keeping Your Objects in the Know]

-THE OBSERVER PATTERN: defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically

-Strive for loosely coupled designs between objects that interact

*Ch3* - [The Decorator Pattern]

-Classes should be open for extension, but closed for modification. (The Open-Closed principle)

-THE DECORATOR PATTERN: attaches additional responsibilities to an object dynamically. Decorators provide a flexible atlernative to subclassing for extending functionality.

*Ch4* - [Baking with OO Goodness]

-THE FACTORY METHOD PATTERN: defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to sublclasses.

-Depend upon abstractions Do not depend upon concrete classes. (Dependency Inversion Principle)
	-No variable should hold a reference to a concrete class (Use a factory to get around)
	-No class should derive from a concrete class
	-No method should override an implemented method of any of its base classes

-THE ABSTRACT FACTORY PATTERN: provides an interface for creating families of related or dependent objects whithout specifying their concrete classes.

*Ch5* - [One of a Kind Objects]

-THE SINGLETON PATTERN: ensures a class has only one instance, and provides a global point of access to it.

*Ch6* - [Encapsulating Invocation]

-THE COMMAND PATTERN: encapuslates a request as an object, thereby letting you paramerterize other objects with different requests, queue or log requests, and support undoable operations.

*CH7* - [Being Adaptive]

-THE ADAPTER PATTERN: converts the interface of a class into antother interface the clients expect. Adapter lets classes work together that couldn't otherwise becasuse of incompatible interfaces.

-THE FACADE PATTERN: provides a unified interface to a set of interfaces in a subsystem. Facade dfines a higher-level interface that makes the subsystem easier to use.

-Talk only to your immediate friends (Principle of Least Knowledge) or (Law of Demeter)
	-Essentially, this says to reduce the interactions between objects to just a few close "friends," so for any object be careful of how many classes it interacts with and how it comes to interact with those classes.
More specific guidelines: (take any object, and from any method within that object, this principle tells us we should only invoke methods that belong to...)
	-The object itself
	-Objects passed in as a parameter to the method
	-Any object the method creates or instantiates
	-Any components of the object
	
