CHAPTER 3
----------------------------------------------------

P. 82:	Starbuzz has a maintenance nightmare on their hands from their shitty program design. What happens when the price of milk goes up? What do they do when they add a new caramel topping? What design principles have they violated with this crapola?
Oh god. When the cows finally unionize, Starbuzz is gonna be up coffee creek without dairy. I apologize. I need to sleep. AHEM. They will have to change the cost() method implementation in every drink that has milk or could have milk, hell, after a while they may not be able to adjust the price of milk before it changes again. They'd be similarly shitfucked if they added a new caramel topping, they'd have to create new classes and new cost methods that include that caramel topping. EFF THAT. As far as violated design principles, I expect "Encapsulation" and "Program to an interface, not an implementation" to shortly be filing assault charges. Jesus, I really hope no one ever reads this.

P. 83:	Write the cost methods for the follwing classes (psuedo-java allowed)
public class Beverage{
public double cost(){
double beverageCost = 0.00;
if(hasMilk){
beverageCost += milkCost;
}
if(hasSoy){
beverageCost += soyCost;
}
if(hasMocha){
beverageCost += mochaCost;
}
if(hasWhip){
beverageCost += whipCost;
}
return beverageCost;
}

public class DarkRoast extends Beverage{
public DarkRoast(){
description = "Most Excellent Dark Roast";
public double cost(){
double beverageCost = 2.50;
beverageCost += super.cost();
}

P. 84:	What are some requirements or other factors that might impact the design?
They don't allow for multiple kinds of milk, say lowfat first of all. That will require editing Beverage. God forbid they ever want to have a sale or a promotion, they'd have to edit the code for that as well, changing costs in the superclass, and possible each subclass, depending on what's on sale/being promoted., the

P. 92:	Before going further, think about how you'd implement the cost() and getDescription() methods
First thoughts on implementation of those methods (and fair warning, my first thoughts are usually not where I end up, I generally have to improve as I code...anyway) for cost, if the decorators are going to be passing a modified cost variable around to each other, then they need to make sure it is initialized in every decorator, and every decorator should take in a cost variable to the cost method, call it previousCost, and add it to their cost, and return currentCost, or something like that. Whichever decorator is at the beginning of the cost chain should have a check to see that it is the first to run cost, and use it's own cost variable instatiated at 0.00. First thoughts, again. With getDescription, I feel like the decorators should return partially formatted Strings, because they're going to append on to the description of the drink, right? So like Mocha should return "with Mocha, " or something even more simply formatted. In fact, if the Mocha decorator returned just "mocha" for its getDescription String, we could have another formatting class that Beverage could make use of, checking the number of returned Strings and applying formatting based on any number of criteria. Such as differentiating between "A dark roast coffee with mocha and whip" and "A dark roast coffee with mocha" depending on what is returned by the decorators. Something I would want to try to do, if I had the time.

P. 99: How would you alter the decorator classes to handle the change in requirements if Starbuzz decided to introduce beverage sizes? Small, medium, and large, and setSize() and getSize() methods in the Beverage class. They want condiment prices to vary depending on the beverage size.
Well, I would probably start by modifiying the cost() methods on the concrete decorators to do a simple boolean check for the size of the drink. Something simple like if(beverage.getSize == "Venti") then it would return back the cost for Venti condiments, as opposed to just a standard condiment pricing.
