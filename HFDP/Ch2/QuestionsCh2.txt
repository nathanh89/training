CHAPTER 2
----------------------------------------------------

P. 42:	Based on this shitty implementation, how fucked up is this program thus far?
I would choose A, B, C, E, and F. It is nearly as fucked up as it can be. (The display elements all use update() method, so that seems to be from a common interface)

P. 54:	Try sketching out the classes you'll need to implement the Weather Station
(It was very tempting to cheat on this one...but I have only read as far as the conversation about planning so far...) Alright, well since I can't sketch here, I'll just write it out:
Public Interface Subject (has abilities:)
registerObserver()
removeObserver()
notifyObserver()

Then you'll have:

Public Class WeatherData implements Subject
Public Interface Observer(has abilities:)
update()

and finally:
(possbily - ) Public Abstract Class Display (To take out the common elements of the display classes...don't know for sure at this point)
Public Class CurrentCondition (extends Display) implements Observer
Public Class Statistics (extends Display) implements Observer
Public Class Forecast (extends Display) implements Observer

Of course...since I'm supposed to favor composition over inheritance rather than have the Observer classes extend Display we could:
Public Interface Display(containing stub display())
Public Class CurrentConditionDisplay implements Display
Public Class StatisticsDisplay implements Display
Public Class ForecastDisplay implements Display

and then for our Observer classes give them Display currentDisplay = new (whatever display behavior is desired)
So for example:

Public Class CurrentCondition implements Observer, Display{
Display currentDisplay = new CurrentConditionDisplay();
update(){}
}

Public Class Statistics implements Observer, Display{
Display currentDisplay = new StatisticsDisplay();
update(){}
}

...etc. But there will be duplication in the continual declaring of the Display object.
Based on the DuckSim example, it may behoove us to extract the Display declaration to a superclass, say AbstractDisplay. But I suppose I'll see what's the better choice here in a minute.

*ADDENDUM* So moving forward, it looks like I was close. We are going to want to have the Observer classes implement a common interface for being an Observer, and for being a DisplayElement. Observer has update(), and DisplayElement has display(). I guess we don't have a superclass for the displays because all three are using different data and displaying differently, so it really doesn't save us anything to have that super(we have to write three seperate implementations for display anyway)...I need to picture this better. The following is for my benefit.

With a superclass AbstractDisplay the code would look like:
Public Interface DisplayElement{
display()
}

Public Abstract Class AbstractDisplay{
DisplayElement currentDisplay;
setCurrentDisplay(DisplayElement newDisplay){
currentDisplay = newDisplay;
	}
}

Then we'd have 3! implementation classes for the display behaviors and three MORE classes that implement Observer and extend AbstractDisplay. 
(DisplayElement implementations)
Public Class CurrentConditionsDisplay implements DisplayElement{}
Public Class StatisticsDisplay implements DisplayElement{}
Public Class ForecastDisplay implements DisplayElement{}
(Observer classes)
Public Class CurrentConditions extends AbstractDisplay implements Observer{}
Public Class Statistics extends AbstractDisplay implements Observer{}
Public Class Forecast extends AbstractDisplay implements Observer{}

Then you'd set the display in the constructor:

Public Class CurrentConditions extends AbstractDisplay implements Observer{
CurrentConditions(DisplayElement newDisplay){
currentDisplay = newDisplay;
	}
}

The only advantage to doing it this way that I can tell is we'd be able to have any Observer class use any DisplayElement implementation, we could have Statistics use a CurrentConditionDisplay...but you'd never want to do that in this program, I guess is the reason we're not doing it that way. Without the superclass Abstract the code would look like:
Public Interface DisplayElement{
display()
}

Then three display classes:
Public Class CurrentConditionsDisplay implements Observer, DisplayElement{}
Public Class StatisticsDisplay implements Observer, DisplayElement{}
Public Class ForecastDisplay implements Observer, DisplayElement{}

Each of those classes would have a concrete unchangeable-at-runtime implementation of display() from interface Display (but again, why would you display statistics on an implementation of DisplayElement meant for Forecast? You wouldn't. You don't need the ability to change display behavior at runtime.) Yeah. That's what I'm going with as to why the Strategy Pattern is not also applicable here. Runtime flexibility is not only not required, but doesn't make sense in this particular situation.

Aaand one final thought...again this shit is mostly for my benefit if you're the poor bastard trying to make sense of my thought flow. I drew out the way the system would work with an AbstractDisplay class because I was having a hard time holding it in my head. Probably because it is quite a bit more complicated looking when drawn than a system that just has the display() implementations in the same classes as the update() implemenations. For a third party display to be added in a system with AbstractDisplay, they'd have to make an implementation class for DisplayElement defining behavior for display(), as well as a class that extends AbstractDisplay AND implements Observer that is composed with a DisplayElement object taking its implementation from the other class they made and that contains their custom implementation of update(). So we add more flexibility in the system with AbstractDisplay, but it's flexibility that is not really required by the needs of the system, and it actually makes it more difficult for third party folks to interact with the system. In fact, the only way I could see that that flexibility would be useful is if we wanted to change the display type without having to instantiate a new Object. For example, to display statistics I would need a Statistics (observer) Object set to use StatisticsDisplay as its DisplayElement (as it would be by default in the constructor). If I wanted to change the display in a non AbstractDisplay system, I have to instantiate a different observer Object (say Forecast) with different behaviors (because it wouldn't have a dynamic DisplayElement Object, just a concrete implementation for display() from DisplayElement). In a system with AbstractDisplay, I wouldn't need to instantiate a new Object, I could just change the behavior of Statistics (or whatever the currently displayed observer Object is) by setting the DisplayElement it uses to something different. This might save time/memory...maybe. But I don't think anywhere near enough to justify the extra complexity in the system. <-QUESTION FOR NICK! (Don't make him read through all your ramblings, ya jackass. Hit him with this lovely summary paragraph).

P. 75a:	Describe how the Observer design pattern makes use of the design principle "Identify the aspects of your application that vary and separte them from what stays the same.
It encapsulates the Obsevers together under a common interface! Hooray!

P. 75b:	Describe how the Observer design pattern makes use of the design principle "Program to an interface, not an implementation"
Well, initially we programmed the Subject to the Subject interface, and the Observers to the Observer interface. Then you all decided "FUCK THAT" and had me extend the subject from Observable. So why don't you tell me why you introduce that blatant contradiction, acknowlegde it openly, then ask this retarded question. Looks like it only makes use of that principle if you want to do it right to me. Although, to be fair, Observer in java.util is still an interface. Good for you.

P. 75c:	Describe how the Observer design pattern makes use of the design principle "Favor Composition over Inheritance"
Well for one, in our example, the Observer Classes are comosed of a weatherData object, rather than inheriting its properties to get the data. So the observers are composed of a subject object that allows them to interact with the subject and be registered and removed, get udpates, etc.

Non-Book Questions:
1) Not really a question, I would just like to note that I object to Loose Coupling, personally. Keep it Tight, that's what I always say.
