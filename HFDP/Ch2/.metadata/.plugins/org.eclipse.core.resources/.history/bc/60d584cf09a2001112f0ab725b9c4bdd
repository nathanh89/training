package com.visionarysoftwaresolutions.hfdpch2.tddstyle.demo.custom;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class InputListenerTests {
	
	public InputListener listener;
	
	@Before
	public void setup(){
		listener = new InputListener();
	}

	@Test
	public void testListenForInput() {
		//Given: I have an InputListener
		//And: I want it to save the next input as a string
		listener.listenForInput();
		//When: I input something (input a 5 into the console to test)
		//Then: That input should be saved in the listener
		assertTrue("5".equals(listener.getDesiredInput()));
	}
	
	@Test
	public void testStopListening(){
		//Given: I have an InputListener
		//And: I want it to accept only 4 valid inputs then stop listening
		listener.listenForInput();
		//When: I input four valid inputs (input 1,2,3,and 4 into console to test)
		//Then: The listener should stop listening
		//Test has passed if application has terminated
	}
	
	@Test
	public void testPositiveValidatorInteraction(){
		//Given I have an InputListener that has a InputValidator
		//And: It is listening for input
		listener.listenForInput();
		//When: I input something into the console (Input 3 to get test to pass)
		//And: I expect the input to be validated
		//Then: The input should be validated
		assertEquals(3, listener.getValidatedInput());
	}
	
	@Test
	public void testNegativeValidatorInteraction(){
		//Given: I have an InputListener that has an InputValidator
		//And: It is listening for input
		listener.listenForInput();
		//When: I input something into the console (Input anything other than 1,2,3 or 4 to get test to pass)
		//And: I do not expect the input to be validated
		//Then: The input should not be validated
		assertEquals(0, listener.getValidatedInput());
	}
	
	@Test
	public void testOnlyFourValidInputs(){
		//Given: I have an InputListener and that has an InputValidator
		//And: It is listening for input
		listener.listenForInput();
		//When: I input 4 valid selections
		//Then: It should stop listening for inputs
	}
	
	@Test
	public void testRecognize_d(){
		//Given: I have an InputListener
		//And: It is listening for input
		listener.listenForInput();
		//When: I input the selection 'd' (do so to make test pass)
		//Then: It should stop listening for inputs
	}
}

