This is an exercise to translate real-world objects into object oriented principles. 
Nathan noticed that in our environment there is an Odwalla cooler. 
He's noticed that it is capable of being turned on, turned off.
It can also have its door open, and door closed.
We've also noticed that the cooler has a capacity, which is defined as the total 
number of slots it has for bottles.


Feature: We can turn the cooler on
Scenario:
As a business owner who wants to keep my things cold, I require a cooler.
Sometimes I would like to turn the cooler on, other times I would like to turn it off.

To-Do List / BDD Record
<table>
	<thead>
		<tr>
		  <th>Feature</th>
		  <th>Story</th>
		  <th>Status</th>
		</tr>
	</thead>
	<tbody>
		<tr>
		  <td>Toggle Power</td>
		  <td>
		    <ul>
		       <li> Given: I have a cooler </li>
		       <li> And: It is off </li>
		       <li> When: I want toggle the power state </li>
		       <li> Then: The cooler should be on </li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Operate Door</td>
		  <td>
		    <ul>
		       <li> Given: I have a cooler </li>
		       <li> And: The door is closed </li>
		       <li> When: I want to open the door </li>
		       <li> Then: The door should be open </li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Add Bottles</td>
		  <td>
		    <ul>
		       <li> Given: I have a cooler </li>
		       <li> And: I want to manually add bottles to it </li>
		       <li> When: I add the bottles to the cooler </li>
		       <li> Then: The bottles should be present </li>
		       <li> Example: I have a cooler with 10 Monsters. When I add 10 more, there should be 20 Monsters total.
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Remove Bottles</td>
		  <td>
		    <ul>
		       <li> Given: I have a cooler stocked with bottles</li>
		       <li> And: I want to manually remove bottles from it </li>
		       <li> When: I remove the bottles from the cooler </li>
		       <li> Then: The removed bottles should not be present </li>
		       <li> Example: I have a cooler with 10 Monsters and I remove 3, only 7 should still be present </li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Get Total Bottle Count</td>
		  <td>
		    <ul>
		       <li> Given: I have a cooler stocked with bottles</li>
		       <li> And: I want to know how many bottles are in the cooler </li>
		       <li> When: I ask for the total number of bottles </li>
		       <li> Then: The correct amount should be given </li>
		       <li> Example: I have a cooler with 10 Monsters and 15 Rockstars, when I ask for the total bottle count, I should get 25 </li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Get Bottle Count by Beverage</td>
		  <td>
		    <ul>
		       <li> Given: I have a cooler stocked with bottles</li>
		       <li> And: I want to know how many bottles are in the cooler for a specific beverage</li>
		       <li> When: I ask how many bottles there are of that particular beverage in the cooler</li>
		       <li> Then: The correct amount should be given</li>
		       <li> Example: I have a cooler with 10 Monsters and 15 Rockstars. If I ask how many Rockstars there are, I should get 15
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Order Bottles for Cooler Manually</td>
		  <td>
		    <ul>
		       <li> Given: I have a cooler</li>
		       <li> And: I want to order bottles to be added to the cooler's stock</li>
		       <li> When: I place an order for those bottles</li>
		       <li> Then: The bottles should be added to the cooler's stock</li>
		       <li> Example: I have a cooler with 10 Monsters and 15 Rockstars. After I order 10 more Monsters and 15 more Rockstars, I should have a total bottle count of 50, consisting of 20 Monsters and 30 Rockstars
		  </td>
		  <td>Implemented, test needs refactoring for clarity. Entire method will need refactoring to placeOrder eventually, and will pass in an order object, rather than the parameters to create an order object</td>
		</tr>
		<tr>
		  <td>Get the Cooler's Capacity</td>
		  <td>
		    <ul>
		       <li> Given: I have a new cooler</li>
		       <li> And: I want to check what it's capacity for holding bottles is</li>
		       <li> When: I ask how many bottles the cooler can hold</li>
		       <li> Then: It should return the correct physical capacity of bottles it can hold</li>
		       <li> Example: I have a new cooler that should hold 100 bottles. Upon asking it for capacity, I should confirm that it can indeed hold 100 bottles</li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Set the Cooler's Custom Upper Capacity (Desired Maximum Stock)</td>
		  <td>
		    <ul>
		       <li> Given: I have a cooler</li>
		       <li> And: I don't want to use it's full physical capacity for stock</li>
		       <li> When: I define a custom capacity for the cooler</li>
		       <li> Then: I should be able to confirm the capacity is set correctly</li>
		       <li> Example: I have a cooler with a maximum physical capacity of 100 bottles. However, I want to keep my stock level at or below 50. After I set the custom capacity to 50, when I ask the cooler how many bottles it is able to hold, rather than returning what it can physically hold, 100, it should tell me it can only hold 50. </li>
		  </td>
		  <td>Implemented, needs refactoring in the method name to distinguish it from the upcoming minimum capacity threshold, and to more accurately reflect what it does (Setting Maximum Desired Stock, which is different than capacity)</td>
		</tr>
		<tr>
		  <td>Veto Invalid Custom Capacity</td>
		  <td>
		    <ul>
		       <li> Given: I have a cooler</li>
		       <li> And: I don't want to use it's full physical capacity for stock</li>
		       <li> When: I define a custom capacity for the cooler that is greater than what it can physically hold</li>
		       <li> Then: I should be unable to the set the capacity to that level</li>
		       <li> Example: I have a cooler that can physically hold 100 bottles. If I try to set the custom capacity to 150 bottles, the cooler should spit in my face. Figuratively. It should reject the capacity setting.
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Create a Cooler with Logical Predefined Characteristics</td>
		  <td>
		    <ul>
		       <li> Given: I am a business owner, and I want to have a cooler</li>
		       <li> When: I acquire the cooler</li>
		       <li> Then: That cooler should come with certain predefined characteristics, specifically physical capacity, and the power state should be off initially, as well as the door closed. (Just like the state it would be in immediately after delivery from a potential cooler manufacturer)</li>
		  </td>
		  <td>Not Yet Implemented</td>
		</tr>
		<tr>
		  <td>Calculate how full the cooler is, %</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> When: I ask how full the cooler is</li>
		       <li> Then: I should get the correct % of capacity being used by bottles</li>
		       <li> Example: If I have a cooler with a physical capacity of 37 bottles, and I have 10 Monsters and 15 Rockstars in the cooler, when I ask how full the cooler is, I should get 68%</li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Set Beverage Price at Cooler</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> When: I want to set the price for a beverage</li>
		       <li> Then: That price should be applied to all beverages of that type</li>
		       <li> Example: If I have a cooler with 10 Monsters and 15 Rockstars, I should be able to set the prices at 3.95 and 2.95, respectively</li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Calculate Total Stock Value</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> And: The prices have been set for the beverages in the cooler</li>
		       <li> When: I want to find the value of the current stock</li>
		       <li> Then: I should get the correct amount, the sum of all the individual bottle's prices in the cooler</li>
		       <li> Example: If I have a cooler with 10 Monsters and 15 Rockstars priced at $3.95 and $2.95, respectively, when I ask for the Total Stock Value, it should be 83.75</li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Calculate Stock Value For a Beverage</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> And: The prices have been set for the beverages in the cooler</li>
		       <li> When: I want to find the value of a particular beverage's current stock</li>
		       <li> Then: I should get the correct amount</li>
		       <li> Example: If I have a cooler with 10 Monsters and 15 Rockstars priced at $3.95 and $2.95, respectively, when I ask for the value of the Monsters, it should be 39.50, and for the Rockstars it should be 44.25</li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Create a new Order from Cooler</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> When: I want to add more stock</li>
		       <li> Then: I should be able to create an order containing the desired bottles I want for my cooler </li>
		  </td>
		  <td>Implemented, needs refactoring. Currently the cooler creates and places orders at the same time, that method "order" needs to be split so that it only does one thing. An order can already be added to, we just need to have Cooler use that ability to create orders (potentially multi-beverage) before actually placing them. As it stands now, the cooler can only create/place orders for a single beverage type at a time.</td>
		</tr>
		<tr>
		  <td>Add items to an Order from the Cooler</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> When: I want to add more stock</li>
		       <li> And: I create an order for that stock </li>
		       <li> Then: I should be able to add multiple containers containing different beverages in each to the order</li>
		  </td>
		  <td>Not Yet Implemented - but Order already has this ability. Implementing this will simply be calling that method from order, resulting in duplication. I'll get the method working first, then look at pushing up to a potential Orderer Class</td>
		</tr>
		<tr>
		  <td>Place Order from Cooler</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> When: I want to add more stock</li>
		       <li> And: I create an order for that stock </li>
		       <li> Then: I should be able to place that order and have the bottles added to the cooler's stock</li>
		  </td>
		  <td>Implemented, but currently mashed in with the Create Order from Cooler feature as method Cooler.order(). I need to refactor this to a seperate method</td>
		</tr>
		<tr>
		  <td>Veto Over-Capacity Order</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> When: I place an order for more bottles</li>
		       <li> And: The bottles ordered will put the cooler over capacity</li>
		       <li> Then: The order should be rejected </li>
		       <li> Example: If I have a cooler with 10 Monsters and 15 Rockstars that has a custom capacity defined at 50 bottles, if I try to order more than 25, so say 20 Monsters and 20 Rockstars, then the order will be rejected</li>
		  </td>
		  <td>Implemented, will need refactoring after separating Create Order from Place Order and adding an Add to Order method in Cooler (to allow for creating an order with multiple containers, and thus beverage types, before submitting the order) because the check will need to run at the Place Order step at that point</td>
		</tr>
		<tr>
		  <td>Orders Composed of More Than 1 Beverage</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> When: I want to place an order for more than 1 beverage</li>
		       <li> Then: The order should be able to be composed of multiple containers, each containing a desired beverage</li>
		       <li> Example: If I have a cooler with 10 Monsters and 15 Rockstars and I want to double my stock, I should be able to compose an order containing both those items, rather than having two orders</li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>BottleManufacturer Fulfills Orders</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> When: I want to place an order for additional stock</li>
		       <li> Then: The responsibility for fulfilling that order should lie with the BottleManufacturer</li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Set Cooler's Desired Minimum Stock for a Beverage</td>
		  <td>
		    <ul>
		       <li> Given: A cooler</li>
		       <li> When: I would like to define a lower stock threshold for a beverage</li>
		       <li> Then: That threshold should be set correctly</li>
		  </td>
		  <td>DONE</td>
		</tr>
		<tr>
		  <td>Cooler has the ability to edit orders before they are sent</td>
		  <td>
		    <ul>
		       <li> Given: A cooler in need of some stock</li>
		       <li> When: I create an order for additional stock</li>
		       <li> And: I add to the order</li>
		       <li> Then: The additions should be a part of the order</li>
		  </td>
		  <td>Refactor after creating Orderer</td>
		</tr>
		<tr>
		  <td>Cooler can send completed orders to BottleManufacturer</td>
		  <td>
		    <ul>
		       <li> Given: A cooler in need of some stock</li>
		       <li> When: I create an order for additional stock</li>
		       <li> Then: The order can be sent to BottleManufacturer</li>
		  </td>
		  <td>Not Yet Implemented</td>
		</tr>
		<tr>
		  <td>Orderer has the ability to create orders</td>
		  <td>
		    <ul>
		       <li> Given: A cooler in need of some stock</li>
		       <li> When: I want to create an order for additional stock</li>
		       <li> Then: The responsibility of creating that order should be with the Orderer, Cooler just needs to let it know what it needs</li>
		  </td>
		  <td>Not Yet Implemented</td>
		</tr>
		<tr>
		  <td>Automatic Reorder!</td>
		  <td>
		    <ul>
		       <li> Given: A cooler with some stock</li>
		       <li> When: A bottle or bottles are removed</li>
		       <li> And: The stock % full reaches a lower limit threshold
		       <li> Then: The cooler should automatically place a new order to the BottleManufacturer, composed of the items in the removed stock list (meaning it doesn't have to compose the order at this point, just pass the list, so this method only does one thing!), ensuring it's stock levels will be restored to their original state</li>
		  </td>
		  <td>Not Yet Implemented</td>
		</tr>
	</tbody>
	<tfoot>
	</tfoot>
</table>
------------------------
Coming up in the future: (Ideas for features and refactoring not fully fleshed out yet or just otherwise not added to the above feature list)

<ul>
<li>SUPER EPIC WIN Feature: The cooler vetoes the door being open more than 10 degrees </li>
<li>Abstract the Manufacturer class...then the order process could be valid for more than just bottles</li>
<li>Explore the concept of backstock, and how that might affect the ordering/stocking process</li>
<li>Refactor the tests with more consistent stock levels so you can avoid the duplication of having to add bottles to the cooler every time before a test, if at all possible</li>
<li>Factor out the Beverage from the Bottle.